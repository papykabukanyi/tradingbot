// Load environment variables from .env file
if (process.env.NODE_ENV !== 'production') {
    require('dotenv').config();
}

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const path = require('path');
const cron = require('node-cron');

// Load configuration validator
const { config, validateConfig } = require('./src/config');

// Validate environment variables before starting
validateConfig();

// Import services
const TradingBot = require('./src/bot/TradingBot');
const alpacaService = require('./src/services/alpacaService');
const newsService = require('./src/services/newsService');
const emailService = require('./src/services/emailService');

// Initialize express app
const app = express();
const PORT = config.server.port;

// Middleware
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
            scriptSrc: ["'self'", "'unsafe-inline'"],
            imgSrc: ["'self'", "data:", "https:"],
            fontSrc: ["'self'", "https://fonts.gstatic.com"],
            connectSrc: ["'self'"],
            scriptSrcAttr: ["'unsafe-inline'"]
        },
    },
}));
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// Initialize trading bot
const tradingBot = new TradingBot();

// Add news API endpoint - This exposes the same news data used by the trading bot
app.get('/api/news', async (req, res) => {
    try {
        const limit = req.query.limit ? parseInt(req.query.limit) : 10;
        const watchlistFilter = req.query.watchlist === 'true';
        
        // Get the news that is being analyzed by the trading bot
        // This ensures the dashboard shows the SAME news data that influences trading decisions
        if (watchlistFilter && tradingBot.watchlist && tradingBot.watchlist.length > 0) {
            // Get news specifically for the bot's active watchlist
            const symbols = tradingBot.watchlist.slice(0, 5); // Limit to top 5 symbols
            const newsImpact = await newsService.getNewsImpact(symbols);
            
            // Flatten the news articles from different symbols with their sentiment scores
            const articles = [];
            for (const symbol in newsImpact) {
                if (newsImpact[symbol].recentNews) {
                    newsImpact[symbol].recentNews.forEach(article => {
                        articles.push({
                            ...article,
                            symbol,
                            sentiment: newsImpact[symbol].sentiment,
                            sentimentScore: newsImpact[symbol].score,
                            tradingImpact: newsImpact[symbol].score > 0.5 ? 'Strong Bullish' : 
                                           newsImpact[symbol].score > 0 ? 'Mildly Bullish' :
                                           newsImpact[symbol].score < -0.5 ? 'Strong Bearish' :
                                           newsImpact[symbol].score < 0 ? 'Mildly Bearish' : 'Neutral'
                        });
                    });
                }
            }
            
            // Sort by publish date (newest first) and limit
            const sortedArticles = articles
                .sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt))
                .slice(0, limit);
                
            res.json({ 
                articles: sortedArticles,
                source: 'Trading Bot Watchlist News'
            });
        } else {
            // Get general market news
            const articles = await newsService.getGeneralMarketNews(limit);
            res.json({ 
                articles,
                source: 'General Market News'
            });
        }
    } catch (error) {
        console.error('News API error:', error);
        res.status(500).json({ error: 'Failed to fetch news data' });
    }
});

// Get watchlist endpoint
app.get('/api/watchlist', async (req, res) => {
    try {
        if (tradingBot.watchlist && tradingBot.watchlist.length > 0) {
            // Return the bot's actual watchlist
            res.json({ watchlist: tradingBot.watchlist });
        } else {
            res.json({ watchlist: [] });
        }
    } catch (error) {
        console.error('Watchlist API error:', error);
        res.status(500).json({ error: 'Failed to fetch watchlist data' });
    }
});

// Bot status endpoint
app.get('/api/status', async (req, res) => {
    try {
        // Get account information from Alpaca
        const account = await alpacaService.getAccount();
        
        // Format the response
        res.json({
            status: {
                running: tradingBot.isRunning || false,
                initialized: tradingBot.isInitialized || false,
                lastCheck: tradingBot.lastCheckTime || null,
                watchlistCount: tradingBot.watchlist ? tradingBot.watchlist.length : 0,
                activeTrades: tradingBot.activeTrades ? tradingBot.activeTrades.length : 0
            },
            account: {
                id: account.id,
                status: account.status,
                equity: account.equity,
                cash: account.cash,
                daytradeCount: account.daytrade_count,
                buyingPower: account.buying_power,
                initialMargin: account.initial_margin,
                lastEquity: account.last_equity,
                maintenanceMargin: account.maintenance_margin,
                multiplier: account.multiplier,
                pendingTransferIn: account.pending_transfer_in,
                portfolioValue: account.portfolio_value,
                tradingBlocked: account.trading_blocked
            }
        });
    } catch (error) {
        console.error('Status API error:', error);
        res.status(500).json({ error: 'Failed to fetch trading bot status' });
    }
});

// Start/stop endpoints
app.post('/api/bot/start', async (req, res) => {
    try {
        if (!tradingBot.isInitialized) {
            await tradingBot.initialize();
        }
        
        tradingBot.start();
        res.json({ message: 'Trading bot started successfully', status: 'running' });
        
        // Send email notification
        emailService.sendTradingAlert(
            'Trading Bot Started',
            'The trading bot has been started via API request'
        );
    } catch (error) {
        console.error('Failed to start trading bot:', error);
        res.status(500).json({ error: 'Failed to start trading bot' });
    }
});

app.post('/api/bot/stop', async (req, res) => {
    try {
        tradingBot.stop();
        res.json({ message: 'Trading bot stopped successfully', status: 'stopped' });
        
        // Send email notification
        emailService.sendTradingAlert(
            'Trading Bot Stopped',
            'The trading bot has been stopped via API request'
        );
    } catch (error) {
        console.error('Failed to stop trading bot:', error);
        res.status(500).json({ error: 'Failed to stop trading bot' });
    }
});

// Schedule bot health check every 30 minutes
// This ensures the bot keeps running even if there are temporary API issues
cron.schedule('*/30 * * * *', async () => {
    try {
        console.log('Running scheduled health check for trading bot');
        
        // Check if bot should be running but isn't
        if (config.server.isProduction && !tradingBot.isRunning && tradingBot.isInitialized) {
            console.log('Bot should be running but is not. Restarting...');
            tradingBot.start();
            
            emailService.sendTradingAlert(
                'Trading Bot Auto-Restarted',
                'The trading bot was not running during scheduled health check and has been automatically restarted.'
            );
        }
        
        // Check for any stale positions that need monitoring
        if (tradingBot.isInitialized) {
            await tradingBot.monitorActiveTrades();
        }
    } catch (error) {
        console.error('Health check failed:', error);
    }
}, {
    timezone: "America/New_York"
});

// Start the server
app.listen(PORT, () => {
    console.log(`Trading bot server running on port ${PORT}`);
    console.log(`Environment: ${config.server.environment}`);
    console.log(`Dashboard: http://localhost:${PORT}`);
    
    // Auto-start the trading bot in production
    if (config.server.isProduction) {
        tradingBot.initialize().then(() => {
            tradingBot.start();
            console.log('ðŸ¤– Trading bot auto-started successfully');
            emailService.sendTradingAlert(
                'Trading Bot Started',
                'The trading bot has been automatically started on Railway deployment.'
            );
        }).catch(err => {
            console.error('Failed to auto-start trading bot:', err);
        });
    }
});
