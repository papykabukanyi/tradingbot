# Alpaca Trading Bot

An advanced algorithmic trading bot built with Node.js that specializes in options trading using technical analysis and news sentiment. The bot integrates with Alpaca Markets API to execute trades on options contracts with 8-month expiration dates while maintaining at-the-money positions.

## üöÄ Features

- **Options Trading**: Automated call and put options trading
- **Technical Analysis**: Multiple indicators including RSI, MACD, Bollinger Bands, and moving averages
- **News Sentiment**: Real-time news analysis and sentiment scoring
- **At-The-Money Strategy**: Focuses on ATM options for optimal liquidity
- **Risk Management**: Built-in position sizing and risk controls
- **Real-time Dashboard**: Web-based monitoring interface
- **Paper Trading**: Safe testing environment using Alpaca's paper trading
- **Railway Deployment**: Ready for cloud deployment

## üìä Technical Indicators Used

- **RSI (Relative Strength Index)**: Momentum oscillator for overbought/oversold conditions
- **MACD (Moving Average Convergence Divergence)**: Trend-following momentum indicator
- **Bollinger Bands**: Volatility indicator for support/resistance levels
- **SMA/EMA**: Simple and Exponential Moving Averages for trend analysis
- **Stochastic Oscillator**: Momentum indicator comparing closing price to price range

## üõ†Ô∏è Installation

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd tradingbot
   ```

2. **Install dependencies**
   ```bash
   npm install
   ```

3. **Configure environment variables**
   Copy `.env.template` to `.env` and add your API keys:
   ```env
   ALPACA_API_KEY=your_alpaca_api_key
   ALPACA_SECRET_KEY=your_alpaca_secret_key
   ALPACA_BASE_URL=https://paper-api.alpaca.markets/v2
   ALPACA_DATA_URL=https://data.alpaca.markets/v2
   NEWS_API_KEY=your_news_api_key
   PORT=3000
   ```

4. **Run the application**
   ```bash
   # Development mode
   npm run dev
   
   # Production mode
   npm start
   ```

## üîß Configuration

### Environment Variables

| Variable | Description | Default |
|----------|-------------|---------|
| `ALPACA_API_KEY` | Alpaca Markets API key | Required |
| `ALPACA_SECRET_KEY` | Alpaca Markets secret key | Required |
| `ALPACA_BASE_URL` | Alpaca API base URL | https://paper-api.alpaca.markets/v2 |
| `NEWS_API_KEY` | NewsAPI key for market news | Optional |
| `PORT` | Server port | 3000 |
| `MAX_POSITION_SIZE` | Maximum position size in USD | 1000 |
| `RISK_PERCENTAGE` | Risk per trade as decimal | 0.02 (2%) |
| `OPTION_EXPIRY_MONTHS` | Target expiration months | 8 |
| `MIN_VOLUME` | Minimum daily volume filter | 10000 |

### Trading Configuration

- **Default Watchlist**: AAPL, MSFT, GOOGL, AMZN, TSLA, NVDA, META, NFLX, SPY, QQQ
- **Trading Hours**: Monday-Friday, 9:30 AM - 4:00 PM ET
- **Risk Management**: 2% of account per trade
- **Options Strategy**: At-the-money calls and puts
- **Expiration Target**: 8 months from current date

## üéØ Trading Strategy

The bot employs a multi-factor approach to options trading:

1. **Technical Analysis**: Combines multiple indicators for signal generation
2. **News Sentiment**: Analyzes recent news for positive/negative sentiment
3. **Risk Management**: Position sizing based on account equity and volatility
4. **Liquidity Focus**: Targets high-volume, liquid options contracts
5. **ATM Strategy**: Prioritizes at-the-money options for optimal time decay

### Signal Generation

- **Bullish Signals**: 
  - Price above SMA20 and SMA50
  - RSI oversold (<30) or bullish momentum
  - MACD above signal line
  - Positive news sentiment
  
- **Bearish Signals**:
  - Price below SMA20 and SMA50
  - RSI overbought (>70) or bearish momentum
  - MACD below signal line
  - Negative news sentiment

## üì± Dashboard Features

Access the web dashboard at `http://localhost:3000`

- **Account Overview**: Real-time account balance and buying power
- **Bot Status**: Current trading status and performance metrics
- **Positions**: Live positions with P&L tracking
- **Orders**: Recent order history and status
- **Watchlist**: Monitored stocks with current prices
- **Market News**: Latest financial news and sentiment

## üöÄ Railway Deployment

The bot is configured for easy deployment on Railway:

1. **Connect Repository**: Link your GitHub repository to Railway
2. **Environment Variables**: Set all required environment variables in Railway dashboard
3. **Deploy**: Railway will automatically build and deploy your bot
4. **Monitor**: Use Railway's logging and monitoring features

### Railway Configuration

- **Build Command**: Automatic via package.json
- **Start Command**: `npm start`
- **Node Version**: 16+ (specified in package.json engines)
- **Restart Policy**: On failure with max 10 retries

## üìä API Endpoints

### Account Information
- `GET /api/account` - Account details and balance
- `GET /api/positions` - Current positions
- `GET /api/orders` - Order history

### Trading Bot
- `GET /api/bot/status` - Bot status and metrics
- `POST /api/bot/start` - Start the trading bot
- `POST /api/bot/stop` - Stop the trading bot

### Market Data
- `GET /api/watchlist` - Watchlist with current prices
- `GET /api/portfolio-history` - Portfolio performance history

## ‚ö†Ô∏è Risk Disclaimer

**IMPORTANT**: This software is for educational and testing purposes only. Trading involves substantial risk and is not suitable for all investors. The bot uses paper trading by default, but real money trading carries the risk of loss.

- Always test thoroughly in paper trading environment
- Never risk more than you can afford to lose
- Past performance does not guarantee future results
- Consider consulting with a financial advisor

## üîí Security

- All API keys are stored in environment variables
- No sensitive data is committed to version control
- HTTPS enforced in production
- Input validation and sanitization
- Rate limiting on API endpoints

## üìù Logging

The bot provides comprehensive logging:

- Trade executions and reasoning
- Technical analysis results
- Error handling and debugging
- Performance metrics
- Market data updates

## ü§ù Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests if applicable
5. Submit a pull request

## üìÑ License

This project is licensed under the MIT License - see the LICENSE file for details.

## üìû Support

For questions or issues:
- Check the logs for error messages
- Verify API keys and permissions
- Ensure market hours for trading
- Review environment configuration

## üîÑ Updates

The bot is designed to be easily updatable:
- Technical indicators can be adjusted
- New symbols can be added to watchlist
- Risk parameters can be modified
- Additional news sources can be integrated

---

**Remember**: Always use paper trading for testing and development. Only use real money after thorough testing and understanding of the risks involved.
